# M A C R O (S):
#  ____ _ _    ____ _  _ ____ _  _ ___    ____ ____ ___ ___ _ _  _ ____ ____ 
#  |___ | |    |__| |\/| |___ |\ |  |     [__  |___  |   |  | |\ | | __ [__  
#  |    | |___ |  | |  | |___ | \|  |     ___] |___  |   |  | | \| |__] ___] 
#                         FILAMENT TYPE | FIRMWARE RETRACTION | Z-HOP CONTROL                                                                                                                                                                                                                  
# 	DESCRIPTION:
#		Macros that can be called to adjust print results with FW retraction and Z-hop control.
#   INCLUDED MACROS:
#       SET_MATERIAL, SET_NOZZLE, SET_RETRACT_DISTANCE, G0, G1, G2, G3, G10, G11, SET_ZHOP,
#       CLEAR_ZHOP, CLEAR_ZHOP, GET_ZHOP
# ============================================================================================
[gcode_macro SET_MATERIAL]
description: Set values based on material type
variable_material: ''
gcode:
    {% set MATERIAL = params.MATERIAL|default('PLA')|string %} ; Get material type from slicer
    SET_GCODE_VARIABLE MACRO=SET_MATERIAL VARIABLE=material VALUE='"{MATERIAL}'" ; Save the material type to a variable just because
    {% if MATERIAL == 'PLA' %} ; If material type is PLA
        BED_MESH_PROFILE LOAD="pla_mesh" ; Load bed mesh
        SET_PRESSURE_ADVANCE ADVANCE=0.035 SMOOTH_TIME=0.040 ; Set pressure_advance settings
        SET_GCODE_OFFSET Z=0 ; Set z_offset
        SET_VELOCITY_LIMIT VELOCITY=100 ACCEL=2000 ; Set max speed/acceleration
        SET_INPUT_SHAPER SHAPER_FREQ_X=58.6 SHAPER_FREQ_Y=34.2 SHAPER_TYPE_X=mzv SHAPER_TYPE_Y=mzv ; Set input_shaper
    {% elif MATERIAL == 'ABS' %} ; If material type is ABS
        BED_MESH_PROFILE LOAD="abs_mesh" ; Load bed mesh
        SET_PRESSURE_ADVANCE ADVANCE=0.035 SMOOTH_TIME=0.040 ; Set pressure_advance settings
        SET_GCODE_OFFSET Z=0 ; Set z_offset
    {%else %} ; If any other material type
        BED_MESH_PROFILE LOAD="default" ; Load bed mesh
        SET_PRESSURE_ADVANCE ADVANCE=0.035 SMOOTH_TIME=0.040 ; Set pressure_advance settings
        SET_GCODE_OFFSET Z=0 ; Set z_offset
    {% endif %}

[gcode_macro SET_NOZZLE]
description: Set values based on nozzle diameter
variable_nozzle: 0
gcode:
    {% set NOZZLE = params.NOZZLE|default(0.4)|float %} ; Get nozzle diameter from slicer
    SET_GCODE_VARIABLE MACRO=SET_NOZZLE VARIABLE=nozzle VALUE={NOZZLE} ; Save the nozzle diameter to a variable just because
    {% if NOZZLE == 0.4 %} ; If nozzle diameter is 0.4
        ## Set z_offset settings
        SET_GCODE_OFFSET Z=0 ; Set z_offset
    {% elif NOZZLE == 0.2 %} ; If nozzle diameter is 0.2
        SET_GCODE_OFFSET Z=0 ; Set z_offset
    {%else %} ; If any other nozzle diameter
        SET_GCODE_OFFSET Z=0 ; Set z_offset
    {% endif %}

[gcode_macro SET_RETRACT_DISTANCE]
variable_current_filament_type: ''
variable_retraction_distance: 0
variable_last_filament_type: 'PLA'
variable_last_retract_dist: 0.5
gcode:
    {% set current_filament_type = params.MATERIAL_TYPE|default("PLA")|string %}
    {% set last_filament_type = printer.save_variables.variables.last_filament_type %}
    {% set last_retract_dist = printer.save_variables.variables.last_retract_dist|default(0.5) %}
    {% set retraction_distance = params.RETRACTION_DISTANCE|default(last_retract_dist)|float %}
    {% if current_filament_type != last_filament_type %}
        {% if "PLA+" in current_filament_type %}
            {% set retraction_distance = 0.7 %}
            M118 "PLA+: 0.6"
            SET_RETRACTION RETRACT_LENGTH={retraction_distance}
        {% elif "PLA" in current_filament_type %}
            {% set retraction_distance = 0.6 %}
            M118 "PLA: 0.6"
            SET_RETRACTION RETRACT_LENGTH={retraction_distance}
        {% elif "PETG" in current_filament_type %}
            {% set retraction_distance = 0.3 %}
            M118 "PETG: 0.3"
            SET_RETRACTION RETRACT_LENGTH={retraction_distance}
        {% elif "ASA" in current_filament_type %}
            {% set retraction_distance = 0.4 %}
            M118 "ASA: 0.4"
            SET_RETRACTION RETRACT_LENGTH={retraction_distance}
        {% elif "TPU" in current_filament_type %}
            {% set retraction_distance = 0.75 %}
            M118 "TPU: 0.75"
            SET_RETRACTION RETRACT_LENGTH={retraction_distance}
        {% else %}
            M118 "{current_filament_type} is an unrecognized filament type, please add to macro."
            {% set invalid_fil = True %}
        {% endif %}
        {% if not invalid_fil %}
            SET_GCODE_VARIABLE MACRO=SET_RETRACT_DISTANCE VARIABLE=last_filament_type VALUE='"{current_filament_type}"'
            SAVE_VARIABLE VARIABLE=last_filament_type VALUE='"{current_filament_type}"'
            SET_GCODE_VARIABLE MACRO=SET_RETRACT_DISTANCE VARIABLE=last_retract_dist VALUE={retraction_distance}
            SAVE_VARIABLE VARIABLE=last_retract_dist VALUE={retraction_distance}
        {% endif %}
    {% else %}
        M118 "No Retraction adjustment necessary"
        SET_RETRACTION RETRACT_LENGTH={retraction_distance}
    {% endif %}

[gcode_macro G0]
rename_existing: G0.1
gcode:
  G1 {rawparams}

[gcode_macro G1]
rename_existing: G1.1
variable_z_hop_offset = 0
gcode:
  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}
  {% if printer.gcode_move.absolute_coordinates and OFFSET > 0 and ('Z' in params) %}
    {% set new_params = ''|string %}
    {% if ('E' in params) %}
      {% set new_params = new_params ~ " E" ~ params.E %}
    {% endif %}
    {% if ('F' in params) %}
      {% set new_params = new_params ~ " F" ~ params.F %}
    {% endif %}
    {% if ('X' in params) %}
      {% set new_params = new_params ~ " X" ~ params.X %}
    {% endif %}
    {% if ('Y' in params) %}
      {% set new_params = new_params ~ " Y" ~ params.Y %}
    {% endif %}
    {% set new_params = new_params ~ (' Z%g' % (params.Z|float + OFFSET))|string %}
    G1.1{new_params}
  {% else %}
    G1.1 {rawparams}
  {% endif %}

[gcode_macro G2]
rename_existing: G2.1
gcode:
  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}
  {% if printer.gcode_move.absolute_coordinates and OFFSET > 0 and ('Z' in params) %}
    {% set new_params = [] %}
    {% for key in params %}
      {% if key == "Z" %}
        {% set x = new_params.append('Z%g' % (params[key]|float + OFFSET)) %}
      {% else %}
        {% set x = new_params.append(key + params[key]) %}
      {% endif %}
    {% endfor %}
    {% set new_params=new_params|join(" ") %}
    G2.1 {new_params}
  {% else %}
    G2.1 {rawparams}
  {% endif %}


[gcode_macro G3]
rename_existing: G3.1
gcode:
  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}
  {% if printer.gcode_move.absolute_coordinates and OFFSET > 0 and ('Z' in params) %}
    {% set new_params = [] %}
    {% for key in params %}
      {% if key == "Z" %}
        {% set x = new_params.append('Z%g' % (params[key]|float + OFFSET)) %}
      {% else %}
        {% set x = new_params.append(key + params[key]) %}
      {% endif %}
    {% endfor %}
    {% set new_params=new_params|join(" ") %}
    G3.1 {new_params}
  {% else %}
    G3.1 {rawparams}
  {% endif %}

[gcode_macro G11]
rename_existing: G11.1
gcode:
  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}
  {% if OFFSET > 0 %}
    {% set VELOCITY = printer.save_variables.variables.current_zhop_velocity|default(300)|float %}
    SET_GCODE_VARIABLE MACRO=G1 VARIABLE=z_hop_offset VALUE=0
    {% set speed = printer.gcode_move.speed %}
    {% if printer.gcode_move.absolute_coordinates %}
      G91
      G1.1 Z-{OFFSET} F{VELOCITY}
      G90
    {% else %}
      G1.1 Z-{OFFSET} F{VELOCITY}
    {% endif %}
    G1.1 F{speed}
  {% endif %}
  G11.1
  {% set wait = printer.save_variables.variables.current_unretract_wait|default(0)|float %}
  {% if wait > 0 %}
    G4 P{'%d' %wait}
  {% endif %}

[gcode_macro G10]
rename_existing: G10.1
gcode:
  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}
  G10.1
  {% set HEIGHT = printer.save_variables.variables.current_zhop_height|default(0)|float %}
  {% if HEIGHT > 0 %}
    {% if OFFSET > 0 %}
      SHOW_MSG MSG="ZHOP allready activ"
    {% else %}
      {% set VELOCITY = printer.save_variables.variables.current_zhop_velocity|default(300)|float %}
      {% set speed = printer.gcode_move.speed %}
      SET_GCODE_VARIABLE MACRO=G1 VARIABLE=z_hop_offset VALUE={HEIGHT}
      {% if printer.gcode_move.absolute_coordinates %}
        G91
        G1.1 Z{HEIGHT} F{VELOCITY}
        G90
      {% else %}
        G1.1 Z{HEIGHT} F{VELOCITY}
      {% endif %}
      G1.1 F{speed}
    {% endif %}
  {% endif %}

[gcode_macro SET_ZHOP]
gcode:
  {% set HEIGHT = params.HEIGHT|default(0)|float %}
  {% set VELOCITY = params.VELOCITY|default(300)|float %}
  {% if VELOCITY > 0 %}
    SAVE_VARIABLE VARIABLE='current_zhop_velocity' VALUE={VELOCITY}
  {% endif %}
  {% if HEIGHT >= 0 %}
    SAVE_VARIABLE VARIABLE='current_zhop_height' VALUE={HEIGHT}
    SHOW_MSG MSG="ZHOP: Z{HEIGHT}/F{VELOCITY}"
  {% endif %}

[gcode_macro CLEAR_ZHOP]
gcode:
  SET_GCODE_VARIABLE MACRO=G1 VARIABLE=z_hop_offset VALUE=0

[gcode_macro GET_ZHOP]
gcode:
  {% set HEIGHT = printer.save_variables.variables.current_zhop_height|default(0)|float %}
  {% set VELOCITY = printer.save_variables.variables.current_zhop_velocity|default(300)|float %}
  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}
  SHOW_MSG MSG="ZHOP height:    {HEIGHT}"
  SHOW_MSG MSG="ZHOP velocity:  {VELOCITY}"
  SHOW_MSG MSG="ZHOP retracted: {'yes' if (OFFSET > 0) else 'no'}"

[gcode_macro SHOW_MSG]
gcode:
  {% set MSG = params.MSG|default("No msg")|string %}
  M117 {MSG}
  RESPOND MSG={'"%s"' % MSG}